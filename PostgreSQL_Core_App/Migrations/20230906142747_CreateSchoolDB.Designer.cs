// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PostgreSQL_Core_App;

#nullable disable

namespace PostgreSQL_Core_App.Migrations
{
    [DbContext(typeof(SchoolContext))]
    [Migration("20230906142747_CreateSchoolDB")]
    partial class CreateSchoolDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoursePerson", b =>
                {
                    b.Property<int>("CoursesCourseId")
                        .HasColumnType("integer");

                    b.Property<int>("PeoplePersonId")
                        .HasColumnType("integer");

                    b.HasKey("CoursesCourseId", "PeoplePersonId");

                    b.HasIndex("PeoplePersonId");

                    b.ToTable("CoursePerson");
                });

            modelBuilder.Entity("PersonPet", b =>
                {
                    b.Property<int>("PersonPeoplePersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PetPetsPetId")
                        .HasColumnType("integer");

                    b.HasKey("PersonPeoplePersonId", "PetPetsPetId");

                    b.HasIndex("PetPetsPetId");

                    b.ToTable("PersonPet");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.AdditionalInfo", b =>
                {
                    b.Property<int>("AdditionalInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AdditionalInfoID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdditionalInfoId"));

                    b.Property<int>("StudentGradeId")
                        .HasColumnType("integer");

                    b.HasKey("AdditionalInfoId");

                    b.HasIndex("StudentGradeId");

                    b.ToTable("AdditionalInfos");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.AdditionalTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("AdditionalTables");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentId"));

                    b.Property<int?>("StudentGradeEnrollmentId")
                        .HasColumnType("integer");

                    b.HasKey("CommentId");

                    b.HasIndex("StudentGradeEnrollmentId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("PostgreSQL_Core_App.CommentTag", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CommentId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("CommentTag", (string)null);
                });

            modelBuilder.Entity("PostgreSQL_Core_App.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("CourseID");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CourseId")
                        .HasName("PK_School.Course");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("PostgreSQL_Core_App.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("DepartmentID");

                    b.Property<int?>("Administrator")
                        .HasColumnType("integer");

                    b.Property<decimal>("Budget")
                        .HasColumnType("money");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("PostgreSQL_Core_App.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<byte[]>("Model")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory", (string)null);
                });

            modelBuilder.Entity("PostgreSQL_Core_App.OfficeAssignment", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("integer")
                        .HasColumnName("InstructorID");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("InstructorId");

                    b.ToTable("OfficeAssignment", (string)null);
                });

            modelBuilder.Entity("PostgreSQL_Core_App.OnlineCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("CourseID");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("URL");

                    b.HasKey("CourseId");

                    b.ToTable("OnlineCourse", (string)null);
                });

            modelBuilder.Entity("PostgreSQL_Core_App.OnsiteCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("CourseID");

                    b.Property<string>("Days")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp");

                    b.HasKey("CourseId");

                    b.ToTable("OnsiteCourse", (string)null);
                });

            modelBuilder.Entity("PostgreSQL_Core_App.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PersonID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PersonId")
                        .HasName("PK_School.Student");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("PostgreSQL_Core_App.Pet", b =>
                {
                    b.Property<int>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PetID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PetId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("PetId")
                        .HasName("PK_dbo.Pets");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.StudentGrade", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("EnrollmentID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EnrollmentId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("CourseID");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("StudentID");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentGrade", (string)null);
                });

            modelBuilder.Entity("PostgreSQL_Core_App.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.ViewDepartmentCourseCount", b =>
                {
                    b.Property<int?>("CourseCount")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.ToTable("ViewDepartmentCourseCounts");
                });

            modelBuilder.Entity("CoursePerson", b =>
                {
                    b.HasOne("PostgreSQL_Core_App.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostgreSQL_Core_App.Person", null)
                        .WithMany()
                        .HasForeignKey("PeoplePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonPet", b =>
                {
                    b.HasOne("PostgreSQL_Core_App.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonPeoplePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostgreSQL_Core_App.Pet", null)
                        .WithMany()
                        .HasForeignKey("PetPetsPetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostgreSQL_Core_App.AdditionalInfo", b =>
                {
                    b.HasOne("PostgreSQL_Core_App.StudentGrade", "StudentGrade")
                        .WithMany("AdditionalInfos")
                        .HasForeignKey("StudentGradeId")
                        .IsRequired()
                        .HasConstraintName("FK_AdditionalInfo_StudentGrade");

                    b.Navigation("StudentGrade");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.AdditionalTable", b =>
                {
                    b.HasOne("PostgreSQL_Core_App.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_AdditionalTable_Comment");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.Comment", b =>
                {
                    b.HasOne("PostgreSQL_Core_App.StudentGrade", "StudentGradeEnrollment")
                        .WithMany("Comments")
                        .HasForeignKey("StudentGradeEnrollmentId");

                    b.Navigation("StudentGradeEnrollment");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.CommentTag", b =>
                {
                    b.HasOne("PostgreSQL_Core_App.Comment", "Comment")
                        .WithMany("CommentTags")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostgreSQL_Core_App.Tag", "Tag")
                        .WithMany("CommentTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.Course", b =>
                {
                    b.HasOne("PostgreSQL_Core_App.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Course_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.Like", b =>
                {
                    b.HasOne("PostgreSQL_Core_App.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_Likes_Comment");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.OfficeAssignment", b =>
                {
                    b.HasOne("PostgreSQL_Core_App.Person", "Instructor")
                        .WithOne("OfficeAssignment")
                        .HasForeignKey("PostgreSQL_Core_App.OfficeAssignment", "InstructorId")
                        .IsRequired()
                        .HasConstraintName("FK_OfficeAssignment_Person");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.OnlineCourse", b =>
                {
                    b.HasOne("PostgreSQL_Core_App.Course", "Course")
                        .WithOne("OnlineCourse")
                        .HasForeignKey("PostgreSQL_Core_App.OnlineCourse", "CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_OnlineCourse_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.OnsiteCourse", b =>
                {
                    b.HasOne("PostgreSQL_Core_App.Course", "Course")
                        .WithOne("OnsiteCourse")
                        .HasForeignKey("PostgreSQL_Core_App.OnsiteCourse", "CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_OnsiteCourse_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.StudentGrade", b =>
                {
                    b.HasOne("PostgreSQL_Core_App.Course", "Course")
                        .WithMany("StudentGrades")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentGrade_Course");

                    b.HasOne("PostgreSQL_Core_App.Person", "Student")
                        .WithMany("StudentGrades")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentGrade_Student");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.Comment", b =>
                {
                    b.Navigation("CommentTags");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.Course", b =>
                {
                    b.Navigation("OnlineCourse");

                    b.Navigation("OnsiteCourse");

                    b.Navigation("StudentGrades");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.Department", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.Person", b =>
                {
                    b.Navigation("OfficeAssignment");

                    b.Navigation("StudentGrades");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.StudentGrade", b =>
                {
                    b.Navigation("AdditionalInfos");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("PostgreSQL_Core_App.Tag", b =>
                {
                    b.Navigation("CommentTags");
                });
#pragma warning restore 612, 618
        }
    }
}
